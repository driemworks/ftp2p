syntax = "proto3";
package proto;
option go_package = "./";

service NodeService  {
    // Obtains a node's name
    rpc GetNodeStatus(NodeInfoRequest) returns (NodeInfoResponse) {}
    // // read/write to known peers
    // rpc ListKnownPeers(ListKnownPeersRequest) returns (stream ListKnownPeersResponse) {}
    // // read/write blocks 
    rpc ListBlocks(ListBlocksRequest) returns (stream BlockResponse) {}
    // add pending transaction
    rpc AddTransaction(AddPendingTransactionRequest) returns (AddPendingTransactionResponse) {}
    rpc Subscribe(JoinChannelRequest) returns (stream ChannelData) {}
    rpc Publish(PublishRequest) returns (PublishResponse) {}
    // list pending transactions
    // rpc ListTransactions(ListPendingTransactionsRequest) returns (stream PendingTransactionResponse) {}
}

message ListPendingTransactionsRequest {}
message PendingTransactionResponse {
    bytes signedTx = 1;
}

message AddPendingTransactionRequest {
    string label = 1;
    string password = 2;
}

message AddPendingTransactionResponse { }

message ListBlocksRequest {
    string fromBlock = 1;
}
message BlockResponse {
    BlockHeaderMessage blockHeader = 1;
    repeated TransactionMessage txs = 2;
}

message TransactionMessage {
    string author = 1;
    string topic = 2;
    string nonce = 4;
    string time = 5;
    string signature = 6;
    string hash = 7;
}

message BlockHeaderMessage {
    string parent = 1;
    uint64 time = 2;
    uint64 number = 3;
    uint32 nonce = 4;
    string miner = 5;
    int32 pow = 6;
}

message ListKnownPeersRequest {}

message ListKnownPeersResponse {
    string name = 1;
    string ip = 2;
    uint64 port = 3;
    bool isBootstrap = 4;
    string address = 5;
}

message NodeInfoRequest { }

message NodeInfoResponse {
    string address = 1;
    float balance = 2;
    repeated string subscriptions = 3;
    repeated string channels = 4;
}

message JoinChannelRequest {
    string txHash = 1;
}

message ChannelData {
    string data = 1;
    string from = 2;
    string topic = 3;
}

message PublishRequest {
    string txHash = 1;
    string message = 2;
}

message PublishResponse {}